datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified Boolean?
  role          Role      @default(BASIC)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Events        Events[]
  validatedEvents Events[] @relation("EventValidator") // RelaÃ§Ã£o com eventos validados pelo admin
}

enum Role {
  BASIC
  ADMIN
  PROMOTER
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Events {
  id             String   @id @default(uuid()) 
  nome           String 
  banner         String 
  carrossel      String[] 
  descricao      String 
  dataInicio     String  // ðŸ”¹ Alterado para data de inÃ­cio
  dataFim        String  // ðŸ”¹ Nova data de tÃ©rmino
  linkParaCompra String 
  endereco       String 
  userId         String? 
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  validate       Boolean?  @default(false) 
  validatedBy    String? 
  validator      User?    @relation("EventValidator", fields: [validatedBy], references: [id], onDelete: SetNull)
  validatedAt    DateTime? 

  @@map("events") 
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationTokenEmail {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
}
